#include <gba.h>
#include <stdint.h>

#include "hud.h"
#include "im_bg_basic.h"
#include "util.h"

const uint16_t HUD_BG[150] = {
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x0,
    0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
    0x12, 0x12, 0x12, 0x4,  0x4,  0x4,  0x4,  0x4,  0x4,  0x4,  0x4,  0x4,
    0x4,  0x4,  0x8,  0x8,  0x8,  0x4,
};

void HudComponent::initialize() {
  // load in the HUD
  load_tiles(this->base_screenblock, REG_BG2CNT, im_bg_basicMetaTiles, HUD_BG,
             HUD_HEIGHT, HUD_WIDTH);

  REG_BG0CNT =
      0 |                 /* priority, 0 is highest, 3 is lowest */
      (CHAR_BASE(0)) |    /* the char block the image data is stored in */
      (BG_256_COLOR) |    /* color mode, 0 is 16 colors, 1 is 256 colors */
      (SCREEN_BASE(12)) | /* the screen block the tile data is stored in */
      (BG_SIZE_3);        /* bg size 3 is 512x512 */
}

void HudComponent::update(uint timer_value, uint score) {

  if (this->_timer != timer_value) {
    this->_timer = timer_value;

    uint hundreds = timer_value / 100 % 10;
    uint tens = timer_value / 10 % 10;
    uint ones = timer_value % 10;

    // 0x9 is the base tile for the numbers
    update_tile(11, 9, 0x8 + hundreds);
    update_tile(12, 9, 0x8 + tens);
    update_tile(13, 9, 0x8 + ones);
  }

  if (this->_score != score) {
    this->_score = score;

    uint hundreds = score / 100 % 10;
    uint tens = score / 10 % 10;
    uint ones = score % 10;

    // 0x9 is the base tile for the numbers
    update_tile(1, 9, 0x8 + hundreds);
    update_tile(2, 9, 0x8 + tens);
    update_tile(3, 9, 0x8 + ones);
  }
}

/**
 * This is an abbreviated version of load_tiles in util.cpp
 * I only want to update the tiles
 */
void HudComponent::update_tile(int x, int y, u16 tile) {
  uint screenblock = se_index_fast(x * 2, y * 2, REG_BG2CNT);
  u16 *dest = this->base_screenblock + screenblock;

  u16 base_idx = tile * 4;
  for (uint i = 0; i < 2; i++) {
    u16 o1 = im_bg_basicMetaTiles[base_idx + i];
    u16 o2 = im_bg_basicMetaTiles[base_idx + i + 2];
    dest[i] = o1;
    // width of a screenblock is 32
    dest[i + 32] = o2;
  }
}
